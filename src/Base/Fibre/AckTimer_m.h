//
// Generated file, do not edit! Created by nedtool 5.1 from src/Base/Fibre/AckTimer.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __ACKTIMER_M_H
#define __ACKTIMER_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 
        #include "K_ShortestPathTableEntry_m.h"
        typedef K_ShortestPathTableEntry *pathPtr;
// }}

/**
 * Class generated from <tt>src/Base/Fibre/AckTimer.msg:22</tt> by nedtool.
 * <pre>
 * message AckTimer
 * {
 *     simtime_t creationTime;
 *     int burstifierId;//Burstifier id
 *     int numSeq; //Sequence number into packet burstifier
 *     int senderId;
 *     int entryId;
 *     int routePos;
 *     int shortestPathCost;
 *     int distTravelled;
 *     int entryIds[];
 * 
 *     pathPtr route;
 * }
 * </pre>
 */
class AckTimer : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::simtime_t creationTime;
    int burstifierId;
    int numSeq;
    int senderId;
    int entryId;
    int routePos;
    int shortestPathCost;
    int distTravelled;
    int *entryIds; // array ptr
    unsigned int entryIds_arraysize;
    pathPtr route;

  private:
    void copy(const AckTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckTimer&);

  public:
    AckTimer(const char *name=nullptr, short kind=0);
    AckTimer(const AckTimer& other);
    virtual ~AckTimer();
    AckTimer& operator=(const AckTimer& other);
    virtual AckTimer *dup() const override {return new AckTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(::omnetpp::simtime_t creationTime);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getEntryId() const;
    virtual void setEntryId(int entryId);
    virtual int getRoutePos() const;
    virtual void setRoutePos(int routePos);
    virtual int getShortestPathCost() const;
    virtual void setShortestPathCost(int shortestPathCost);
    virtual int getDistTravelled() const;
    virtual void setDistTravelled(int distTravelled);
    virtual void setEntryIdsArraySize(unsigned int size);
    virtual unsigned int getEntryIdsArraySize() const;
    virtual int getEntryIds(unsigned int k) const;
    virtual void setEntryIds(unsigned int k, int entryIds);
    virtual pathPtr& getRoute();
    virtual const pathPtr& getRoute() const {return const_cast<AckTimer*>(this)->getRoute();}
    virtual void setRoute(const pathPtr& route);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckTimer& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ACKTIMER_M_H

