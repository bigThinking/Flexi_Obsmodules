//
// Generated file, do not edit! Created by nedtool 5.1 from C:/Users/s210036575/Documents/Omnetpp/obsmodules/src/Base/NodeRoutingTableEntry.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NODEROUTINGTABLEENTRY_M_H
#define __NODEROUTINGTABLEENTRY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "K_ShortestPathTableEntry_m.h"
     typedef K_ShortestPathTableEntry *pathPtr; 
// }}

/**
 * Class generated from <tt>C:/Users/s210036575/Documents/Omnetpp/obsmodules/src/Base/NodeRoutingTableEntry.msg:24</tt> by nedtool.
 * <pre>
 * class NodeRoutingTableEntry
 * {
 *     double pheromoneConc;
 *     int entry_Id;
 *     bool responseReceived = true;
 * 
 *     int source;
 *     int destination;
 *     double assignedSpectrumCenter;
 *     double assignedSpectrumLowerBound;
 *     double assignedSpectrumUpperBound;
 *     int inputPort;
 *     int outputPort;
 * 
 *     pathPtr route;
 *     int usedCounter = 0;
 *     int failedCounter = 0;
 *     int successCounter = 0;
 *     int numberOfCoreNodes = 0;
 * }
 * </pre>
 */
class NodeRoutingTableEntry : public ::omnetpp::cObject
{
  protected:
    double pheromoneConc;
    int entry_Id;
    bool responseReceived;
    int source;
    int destination;
    double assignedSpectrumCenter;
    double assignedSpectrumLowerBound;
    double assignedSpectrumUpperBound;
    int inputPort;
    int outputPort;
    pathPtr route;
    int usedCounter;
    int failedCounter;
    int successCounter;
    int numberOfCoreNodes;

  private:
    void copy(const NodeRoutingTableEntry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NodeRoutingTableEntry&);

  public:
    NodeRoutingTableEntry();
    NodeRoutingTableEntry(const NodeRoutingTableEntry& other);
    virtual ~NodeRoutingTableEntry();
    NodeRoutingTableEntry& operator=(const NodeRoutingTableEntry& other);
    virtual NodeRoutingTableEntry *dup() const override {return new NodeRoutingTableEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getPheromoneConc() const;
    virtual void setPheromoneConc(double pheromoneConc);
    virtual int getEntry_Id() const;
    virtual void setEntry_Id(int entry_Id);
    virtual bool getResponseReceived() const;
    virtual void setResponseReceived(bool responseReceived);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual double getAssignedSpectrumCenter() const;
    virtual void setAssignedSpectrumCenter(double assignedSpectrumCenter);
    virtual double getAssignedSpectrumLowerBound() const;
    virtual void setAssignedSpectrumLowerBound(double assignedSpectrumLowerBound);
    virtual double getAssignedSpectrumUpperBound() const;
    virtual void setAssignedSpectrumUpperBound(double assignedSpectrumUpperBound);
    virtual int getInputPort() const;
    virtual void setInputPort(int inputPort);
    virtual int getOutputPort() const;
    virtual void setOutputPort(int outputPort);
    virtual pathPtr& getRoute();
    virtual const pathPtr& getRoute() const {return const_cast<NodeRoutingTableEntry*>(this)->getRoute();}
    virtual void setRoute(const pathPtr& route);
    virtual int getUsedCounter() const;
    virtual void setUsedCounter(int usedCounter);
    virtual int getFailedCounter() const;
    virtual void setFailedCounter(int failedCounter);
    virtual int getSuccessCounter() const;
    virtual void setSuccessCounter(int successCounter);
    virtual int getNumberOfCoreNodes() const;
    virtual void setNumberOfCoreNodes(int numberOfCoreNodes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NodeRoutingTableEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NodeRoutingTableEntry& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NODEROUTINGTABLEENTRY_M_H

