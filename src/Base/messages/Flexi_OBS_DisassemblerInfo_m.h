//
// Generated file, do not edit! Created by nedtool 5.1 from C:/Users/s210036575/Documents/Omnetpp/obsmodules/src/Base/messages/Flexi_OBS_DisassemblerInfo.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __FLEXI_OBS_DISASSEMBLERINFO_M_H
#define __FLEXI_OBS_DISASSEMBLERINFO_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>C:/Users/s210036575/Documents/Omnetpp/obsmodules/src/Base/messages/Flexi_OBS_DisassemblerInfo.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class Flexi_OBS_DisassemblerInfo
 * {
 *     int entryPort;
 *     int ipAddress;
 * }
 * </pre>
 */
class Flexi_OBS_DisassemblerInfo : public ::omnetpp::cObject
{
  protected:
    int entryPort;
    int ipAddress;

  private:
    void copy(const Flexi_OBS_DisassemblerInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Flexi_OBS_DisassemblerInfo&);

  public:
    Flexi_OBS_DisassemblerInfo();
    Flexi_OBS_DisassemblerInfo(const Flexi_OBS_DisassemblerInfo& other);
    virtual ~Flexi_OBS_DisassemblerInfo();
    Flexi_OBS_DisassemblerInfo& operator=(const Flexi_OBS_DisassemblerInfo& other);
    virtual Flexi_OBS_DisassemblerInfo *dup() const override {return new Flexi_OBS_DisassemblerInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEntryPort() const;
    virtual void setEntryPort(int entryPort);
    virtual int getIpAddress() const;
    virtual void setIpAddress(int ipAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Flexi_OBS_DisassemblerInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Flexi_OBS_DisassemblerInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLEXI_OBS_DISASSEMBLERINFO_M_H

