//
// Generated file, do not edit! Created by nedtool 5.1 from src/Base/messages/EndToEndAck.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __ENDTOENDACK_M_H
#define __ENDTOENDACK_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "K_ShortestPathTableEntry_m.h"
    #include "TransmittedMessage_m.h"
     typedef K_ShortestPathTableEntry *pathPtr; 
// }}

/**
 * Class generated from <tt>src/Base/messages/EndToEndAck.msg:28</tt> by nedtool.
 * <pre>
 * packet EndToEndAck extends TransmittedMessage_Base
 * {
 *     pathPtr route;
 *     int routePos = 0;
 * 
 *     int burstifierId = -1; //Burstifier id
 *     int numSeq = -1; //Sequence number into packet burstifier
 *     int senderId = -1; //Burst sender identifier. Not used as a Id
 *     int entry_Id;
 * 
 *     int entryIds[];
 *     int entryIdPos;
 *     int shortestPathCost;
 *     int distTravelled;
 *     int nodeCounter = 0;
 * 
 *     byteLength = 60;
 *     isControl = true;
 * }
 * </pre>
 */
class EndToEndAck : public ::TransmittedMessage_Base
{
  protected:
    pathPtr route;
    int routePos;
    int burstifierId;
    int numSeq;
    int senderId;
    int entry_Id;
    int *entryIds; // array ptr
    unsigned int entryIds_arraysize;
    int entryIdPos;
    int shortestPathCost;
    int distTravelled;
    int nodeCounter;

  private:
    void copy(const EndToEndAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EndToEndAck&);

  public:
    EndToEndAck(const char *name=nullptr, short kind=0);
    EndToEndAck(const EndToEndAck& other);
    virtual ~EndToEndAck();
    EndToEndAck& operator=(const EndToEndAck& other);
    virtual EndToEndAck *dup() const override {return new EndToEndAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual pathPtr& getRoute();
    virtual const pathPtr& getRoute() const {return const_cast<EndToEndAck*>(this)->getRoute();}
    virtual void setRoute(const pathPtr& route);
    virtual int getRoutePos() const;
    virtual void setRoutePos(int routePos);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getEntry_Id() const;
    virtual void setEntry_Id(int entry_Id);
    virtual void setEntryIdsArraySize(unsigned int size);
    virtual unsigned int getEntryIdsArraySize() const;
    virtual int getEntryIds(unsigned int k) const;
    virtual void setEntryIds(unsigned int k, int entryIds);
    virtual int getEntryIdPos() const;
    virtual void setEntryIdPos(int entryIdPos);
    virtual int getShortestPathCost() const;
    virtual void setShortestPathCost(int shortestPathCost);
    virtual int getDistTravelled() const;
    virtual void setDistTravelled(int distTravelled);
    virtual int getNodeCounter() const;
    virtual void setNodeCounter(int nodeCounter);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EndToEndAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EndToEndAck& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ENDTOENDACK_M_H

