//
// Generated file, do not edit! Created by nedtool 5.1 from src/Base/messages/Flexi_OBS_BurstControlPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __FLEXI_OBS_BURSTCONTROLPACKET_M_H
#define __FLEXI_OBS_BURSTCONTROLPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 
    #include "TransmittedMessage_m.h"
    #include "K_ShortestPathTableEntry_m.h"
    typedef K_ShortestPathTableEntry *pathPtr;
     
// }}

/**
 * Class generated from <tt>src/Base/messages/Flexi_OBS_BurstControlPacket.msg:35</tt> by nedtool.
 * <pre>
 * packet Flexi_OBS_BurstControlPacket extends TransmittedMessage_Base
 * {
 *     int srcAddr = -1;
 *     int destAddr = -1;
 *     double assignedSpectrumCenter = -1; //Burst's assigned center
 *     double assignedSpectrumLowerBound = -1; //Burst assigned spectrum Lower Bound
 *     double assignedSpectrumUpperBound = -1; //Burst assigned spectrum upper bound
 *     int burstifierId = -1; //Burstifier id
 *     int numSeq = -1; //Sequence number into packet burstifier
 *     simtime_t burstOffset = -1; //Difference between BCP send time and burst send time
 *     int burstSize = -1; // Associated burst size  in bytes
 *     double datarate; //Gbps
 *     bool hasSetupTransmitter = false;
 * 
 *     int distTravelled = 0; //distance travelled by bcp//needs tobe modified in mux
 *     int shortestPathCost;
 *     int nodeCounter = 0;
 * 
 *     pathPtr route;
 *     int routePos = 0;
 * 
 *     int entryId = -1;//if only routing entry at source used
 *     int entryIds[];//entryids of routing entries used to route bcp
 *     bool recordPath = false;
 *     int pathPos = 0;
 * 
 *     int componentIds[];
 *     int compPos = 0;
 * 
 *     int reservedChannelIndex;
 * 
 *     double percentFreeWavelengths = 1;
 *     simtime_t killTime;
 * 
 *     byteLength = 150;
 *     isControl = true;
 * 
 * }
 * </pre>
 */
class Flexi_OBS_BurstControlPacket : public ::TransmittedMessage_Base
{
  protected:
    int srcAddr;
    int destAddr;
    double assignedSpectrumCenter;
    double assignedSpectrumLowerBound;
    double assignedSpectrumUpperBound;
    int burstifierId;
    int numSeq;
    ::omnetpp::simtime_t burstOffset;
    int burstSize;
    double datarate;
    bool hasSetupTransmitter;
    int distTravelled;
    int shortestPathCost;
    int nodeCounter;
    pathPtr route;
    int routePos;
    int entryId;
    int *entryIds; // array ptr
    unsigned int entryIds_arraysize;
    bool recordPath;
    int pathPos;
    int *componentIds; // array ptr
    unsigned int componentIds_arraysize;
    int compPos;
    int reservedChannelIndex;
    double percentFreeWavelengths;
    ::omnetpp::simtime_t killTime;

  private:
    void copy(const Flexi_OBS_BurstControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Flexi_OBS_BurstControlPacket&);

  public:
    Flexi_OBS_BurstControlPacket(const char *name=nullptr, short kind=0);
    Flexi_OBS_BurstControlPacket(const Flexi_OBS_BurstControlPacket& other);
    virtual ~Flexi_OBS_BurstControlPacket();
    Flexi_OBS_BurstControlPacket& operator=(const Flexi_OBS_BurstControlPacket& other);
    virtual Flexi_OBS_BurstControlPacket *dup() const override {return new Flexi_OBS_BurstControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual double getAssignedSpectrumCenter() const;
    virtual void setAssignedSpectrumCenter(double assignedSpectrumCenter);
    virtual double getAssignedSpectrumLowerBound() const;
    virtual void setAssignedSpectrumLowerBound(double assignedSpectrumLowerBound);
    virtual double getAssignedSpectrumUpperBound() const;
    virtual void setAssignedSpectrumUpperBound(double assignedSpectrumUpperBound);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual ::omnetpp::simtime_t getBurstOffset() const;
    virtual void setBurstOffset(::omnetpp::simtime_t burstOffset);
    virtual int getBurstSize() const;
    virtual void setBurstSize(int burstSize);
    virtual double getDatarate() const;
    virtual void setDatarate(double datarate);
    virtual bool getHasSetupTransmitter() const;
    virtual void setHasSetupTransmitter(bool hasSetupTransmitter);
    virtual int getDistTravelled() const;
    virtual void setDistTravelled(int distTravelled);
    virtual int getShortestPathCost() const;
    virtual void setShortestPathCost(int shortestPathCost);
    virtual int getNodeCounter() const;
    virtual void setNodeCounter(int nodeCounter);
    virtual pathPtr& getRoute();
    virtual const pathPtr& getRoute() const {return const_cast<Flexi_OBS_BurstControlPacket*>(this)->getRoute();}
    virtual void setRoute(const pathPtr& route);
    virtual int getRoutePos() const;
    virtual void setRoutePos(int routePos);
    virtual int getEntryId() const;
    virtual void setEntryId(int entryId);
    virtual void setEntryIdsArraySize(unsigned int size);
    virtual unsigned int getEntryIdsArraySize() const;
    virtual int getEntryIds(unsigned int k) const;
    virtual void setEntryIds(unsigned int k, int entryIds);
    virtual bool getRecordPath() const;
    virtual void setRecordPath(bool recordPath);
    virtual int getPathPos() const;
    virtual void setPathPos(int pathPos);
    virtual void setComponentIdsArraySize(unsigned int size);
    virtual unsigned int getComponentIdsArraySize() const;
    virtual int getComponentIds(unsigned int k) const;
    virtual void setComponentIds(unsigned int k, int componentIds);
    virtual int getCompPos() const;
    virtual void setCompPos(int compPos);
    virtual int getReservedChannelIndex() const;
    virtual void setReservedChannelIndex(int reservedChannelIndex);
    virtual double getPercentFreeWavelengths() const;
    virtual void setPercentFreeWavelengths(double percentFreeWavelengths);
    virtual ::omnetpp::simtime_t getKillTime() const;
    virtual void setKillTime(::omnetpp::simtime_t killTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Flexi_OBS_BurstControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Flexi_OBS_BurstControlPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLEXI_OBS_BURSTCONTROLPACKET_M_H

