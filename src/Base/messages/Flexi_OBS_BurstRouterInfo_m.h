//
// Generated file, do not edit! Created by nedtool 5.1 from src/Base/messages/Flexi_OBS_BurstRouterInfo.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __FLEXI_OBS_BURSTROUTERINFO_M_H
#define __FLEXI_OBS_BURSTROUTERINFO_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/Base/messages/Flexi_OBS_BurstRouterInfo.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class Flexi_OBS_BurstRouterInfo
 * {
 *     int burstId = -1; // Internal burst Id used only by router module. This is independent for any other Id.
 *     int burstifierId = -1; // Burstifier Id. Part of burst identifier.
 *     int numSeq = -1; // Sequence number. The other part of burst identifier.
 *     double assignedSpectrumCenter = -1;
 *     double aSsignedSpectrumLowerBound = -1;
 *     double assignedSpectrumUpperBund = -1;
 *     int label = -1; // Destination label.
 *     int ACO_RouteId = -1;
 *       //simtime_t time; // Message creation timestamp. Used to insert into BCP's sender queue.
 *       //int senderId;
 *       //string route;
 * }
 * </pre>
 */
class Flexi_OBS_BurstRouterInfo : public ::omnetpp::cObject
{
  protected:
    int burstId;
    int burstifierId;
    int numSeq;
    double assignedSpectrumCenter;
    double aSsignedSpectrumLowerBound;
    double assignedSpectrumUpperBund;
    int label;
    int ACO_RouteId;

  private:
    void copy(const Flexi_OBS_BurstRouterInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Flexi_OBS_BurstRouterInfo&);

  public:
    Flexi_OBS_BurstRouterInfo();
    Flexi_OBS_BurstRouterInfo(const Flexi_OBS_BurstRouterInfo& other);
    virtual ~Flexi_OBS_BurstRouterInfo();
    Flexi_OBS_BurstRouterInfo& operator=(const Flexi_OBS_BurstRouterInfo& other);
    virtual Flexi_OBS_BurstRouterInfo *dup() const override {return new Flexi_OBS_BurstRouterInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getBurstId() const;
    virtual void setBurstId(int burstId);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual double getAssignedSpectrumCenter() const;
    virtual void setAssignedSpectrumCenter(double assignedSpectrumCenter);
    virtual double getASsignedSpectrumLowerBound() const;
    virtual void setASsignedSpectrumLowerBound(double aSsignedSpectrumLowerBound);
    virtual double getAssignedSpectrumUpperBund() const;
    virtual void setAssignedSpectrumUpperBund(double assignedSpectrumUpperBund);
    virtual int getLabel() const;
    virtual void setLabel(int label);
    virtual int getACO_RouteId() const;
    virtual void setACO_RouteId(int ACO_RouteId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Flexi_OBS_BurstRouterInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Flexi_OBS_BurstRouterInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLEXI_OBS_BURSTROUTERINFO_M_H

